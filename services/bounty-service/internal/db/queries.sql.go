// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBounty = `-- name: CreateBounty :exec
INSERT INTO bounties (id, title, description, points) VALUES ($1, $2, $3, $4)
`

type CreateBountyParams struct {
	ID          uuid.UUID      `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Points      int32          `json:"points"`
}

func (q *Queries) CreateBounty(ctx context.Context, arg CreateBountyParams) error {
	_, err := q.db.ExecContext(ctx, createBounty,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Points,
	)
	return err
}

const getBounties = `-- name: GetBounties :many
SELECT id, title, description, points FROM bounties
`

func (q *Queries) GetBounties(ctx context.Context) ([]Bounty, error) {
	rows, err := q.db.QueryContext(ctx, getBounties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bounty{}
	for rows.Next() {
		var i Bounty
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBountyByID = `-- name: GetBountyByID :one
SELECT id, title, description, points FROM bounties WHERE id = $1
`

func (q *Queries) GetBountyByID(ctx context.Context, id uuid.UUID) (Bounty, error) {
	row := q.db.QueryRowContext(ctx, getBountyByID, id)
	var i Bounty
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Points,
	)
	return i, err
}

const updateBounty = `-- name: UpdateBounty :exec
UPDATE bounties SET title = $1, description = $2, points = $3 WHERE id = $4
`

type UpdateBountyParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Points      int32          `json:"points"`
	ID          uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateBounty(ctx context.Context, arg UpdateBountyParams) error {
	_, err := q.db.ExecContext(ctx, updateBounty,
		arg.Title,
		arg.Description,
		arg.Points,
		arg.ID,
	)
	return err
}
